@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using HiddenVilla_Server.Services;
@using HiddenVilla_Server.Services.Contracts;
@using Models.Dto
@using Business.Contracts

@inject IFileUpload FileUpload

@inject IHotelRoomRepository HotelRoomRepo
@inject IHotelImagesRepository HotelImagesRepo
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ms-3">@Title Hotel Room</h3>
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="HotelRoomModel.Name" class="form-control" id="name"></InputText>
                            <label for="name">Name</label>
                            <ValidationMessage For="()=>HotelRoomModel.Name"></ValidationMessage>
                        </div>
                        <div class="form-floating mb-3">
                            <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control" id="occupancy"></InputNumber>
                            <label for="occupancy">Occupancy</label>
                            <ValidationMessage For="()=>HotelRoomModel.Occupancy"></ValidationMessage>
                         </div>
                        <div class="form-floating mb-3">
                            <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control" id="rate"></InputNumber>
                            <label for="rate">Rate</label>
                            <ValidationMessage For="()=>HotelRoomModel.RegularRate"></ValidationMessage>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control" id="sqft"></InputText>
                            <label for="sqft">Sq ft.</label>
                        </div>
                        <div class="mb-3" style="height:250px;">
@*                            <InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control" id="details"></InputTextArea>
*@                            <label for="details">Details</label>
                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please enter room details.">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>
                            
                            </EditorContent>
                        </BlazoredTextEditor>
                        </div>
                        <div class="form-floating mb-3" style="padding-top:70px;">
                            <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">
                            @if (IsImageUploadProcessStarted)
                            {
                                <div class="col-md-12">
                                    <span><i class="fas fa-spin fa-spinner"></i> Please wait.. Images are uploading...</span>
                                </div>
                            }
                            @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                            {
                                int serial = 1;
                                foreach (var roomImage in HotelRoomModel.ImageUrls)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="room-image" style="background: url('@roomImage') 50% 50%; ">
                                            <span class="room-image-title">@serial</span>
                                        </div>

                                        <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                            Delete
                                        </button>
                                    </div>
                                    serial++;
                                }
                            }
                        </div>
                        </div>

                        <div class="mb-3">
                            <button class="btn btn-primary">@Title Room</button>
                            <NavLink href="hotel-room" class="btn btn-secondary">Back To List</NavLink>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
</div>

@code {

    [Parameter]
    public int? Id { get; set; } 
    private HotelRoomDTO HotelRoomModel { get; set; } = new HotelRoomDTO();
    private string Title { get; set; } = "Create";
    private HotelRoomImageDTO RoomImage { get; set; } = new HotelRoomImageDTO();
    private List<string> DeletedImageNames { get; set; } = new List<string>();
    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private bool IsImageUploadProcessStarted { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationState;

        if (!authenticationState.User.IsInRole(Common.SD.Role_Admin))
        {
            var uri = new Uri(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/Identity/Account/Login?returnUrl={uri.LocalPath}");
        }

        if (Id != null)
        {
            // We are updating
            Title = "Update";
            HotelRoomModel = await HotelRoomRepo.GetById(Id.Value);

            if (HotelRoomModel?.HotelRoomImages != null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }
        }
        else
        {
            // create
            HotelRoomModel = new HotelRoomDTO();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // SetHTML();
        if (!firstRender) return;

        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(HotelRoomModel.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(HotelRoomModel.Details);
                }
                loading = false;
            }
            catch
            {

                await Task.Delay(10);
                loading = true;
            }
        }
        
        return;
    }

    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            var roomDetailsByName = await HotelRoomRepo.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
            if (roomDetailsByName != null)
            {
                // there is duplicate room show error
                await JSRuntime.ToastrError("Room name already exists");
                return;
            }

            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                // update
                HotelRoomModel.Details = await this.QuillHtml.GetHTML();

                var updateRoomResult = await HotelRoomRepo.Update(HotelRoomModel.Id, HotelRoomModel);
                if ((HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any()) || (DeletedImageNames != null && DeletedImageNames.Any()))
                {
                    if (DeletedImageNames != null && DeletedImageNames.Any())
                    {
                        foreach (var deletedImage in DeletedImageNames)
                        {
                            var imageName = deletedImage.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
                            // remove from filesystem
                            var result = FileUpload.DeleteFile(imageName);
                            // remove from database
                            await HotelImagesRepo.DeleteByImageUrl(deletedImage);

                        }
                    }
                    await AddHotelRommImage(updateRoomResult);
                }
                await JSRuntime.ToastrSuccess("Room updated successfully!");
            }
            else
            {
                // create
                HotelRoomModel.Details = await this.QuillHtml.GetHTML();

                var createdResult = await HotelRoomRepo.Create(HotelRoomModel);
                await AddHotelRommImage(createdResult);

                await JSRuntime.ToastrSuccess("Room created successfully!");
            }
        }
        catch (Exception)
        {

            //log exception
        }



        NavigationManager.NavigateTo("hotel-room");
    }

    //public void SetHTML()
    //{
    //    if (!string.IsNullOrEmpty(HotelRoomModel.Details))
    //    {
    //        this.QuillHtml.LoadHTMLContent(HotelRoomModel.Details);
    //    }
    //    StateHasChanged();
    //}

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JSRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                    {
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await JSRuntime.ToastrError("Image uploading failed");
                    return;
                }
            }
            IsImageUploadProcessStarted = false;
        }
        catch (Exception ex)
        {
            await JSRuntime.ToastrError(ex.Message);
        }



    }

    private async Task AddHotelRommImage(HotelRoomDTO roomDetails)
    {
        foreach (var imageUrl in HotelRoomModel.ImageUrls)
        {
            // Check if already in database
            if (HotelRoomModel.HotelRoomImages == null || HotelRoomModel.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
            {

                RoomImage = new HotelRoomImageDTO()
                    {
                        RoomId = roomDetails.Id,
                        RoomImageUrl = imageUrl
                    };
                await HotelImagesRepo.Create(RoomImage);

            }
        }
    }

    private async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
            // during Create
            if (HotelRoomModel.Id == 0 && Title == "Create")
            {
                // remove from filesystem
                var result = FileUpload.DeleteFile(imageName);
            }
            else
            {
                // during Update
                DeletedImageNames ??= new List<string>();
                DeletedImageNames.Add(imageUrl);
                // Actual delete while occure when update button is clicked (HandleHotelRoomUpsert)


            }
            // remove from Model
            HotelRoomModel.ImageUrls.RemoveAt(imageIndex);

        }
        catch (Exception ex)
        {
            
            await JSRuntime.ToastrError(ex.Message);
        }
    }
}
